@page "/signOut"
@using Visitor.Data
@using Visitor.Models
@inject DatabaseHandler DbHandler
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject IJSRuntime jsRuntime
@using System.Net
@inject NavigationManager NavManager

<div class="container">

    <div class="d-flex justify-content-center">
        <div>
            <h3 class="text-center">@DateTime.Now.ToShortDateString() Visitors</h3>

            <table class="table table-bordered table-striped visitorTable">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Company</th>
                        <th class="timeColumn">Sign In</th>
                        <th class="timeColumn">Sign Out</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Visitors.Any()){
                        @foreach (var visitor in Visitors) {
                    <tr>
                        <td>@visitor.FullName</td>
                        <td>@visitor.Company</td>
                        <td class="timeColumn">@visitor.Datetime_In.ToShortTimeString()</td>
                        @if (visitor.IsSignedIn) {
                            <td class="timeColumn"><button class="btn btn-info floatRight" @onclick="(() => SignOutVisitor(visitor))">Sign Out</button></td>
                        }
                        else
                        {
                            <td class="timeColumn">@visitor.Datetime_Out.Value.ToShortTimeString()</td>
                        }
                    </tr>
                        }
                    }
                    else
                    {
                        <tr><td colspan="4"><strong>No Visitors Today</strong></td></tr>
                    }
                </tbody>
            </table>

            <button class="btn btn-warning floatRight" type="button" @onclick="ReturnToHome">&larr; Go Back</button> 
        </div>
    </div>
</div>


@code {
    List<VisitorModel> Visitors = new List<VisitorModel>();
    protected override async Task OnInitializedAsync()
    {
        await RefreshVisitors();
    }
    private async Task RefreshVisitors()
    {
        string ip = httpContextAccessor.HttpContext.Connection?.RemoteIpAddress.ToString();
        if (ip == "::1")
        {
            ip =
            Dns.GetHostEntry(Dns.GetHostName()).AddressList[2].ToString();
        }

        Visitors = await DbHandler.GetVisitorsForStore(ip);
    }

    private async Task SignOutVisitor(VisitorModel visitor) {
        if (!await jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to sign out '{visitor.FullName}'?"))
            return;

        await DbHandler.UpdateVisitor(visitor.Id);
        await RefreshVisitors();
    }

    private void ReturnToHome() {
        NavManager.NavigateTo("/");
    }

}
